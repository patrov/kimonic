:textile
  h2. StackTrace

  @StackTrace@ is a module you can use to inspect what an application is doing
  internally while it runs. It provides an interface for monitoring method
  calls, which you can use to build monitoring and debugging tools.

  <pre>// In the browser
  JS.require('JS.StackTrace', function(StackTrace) { ... });

  // In CommonJS
  var StackTrace = require('jsclass/src/stack_trace').StackTrace;</pre>

  The @StackTrace@ module supports the "@Observable@":/observable.html interface
  for monitoring what the stack is doing:

  <pre>StackTrace.addObserver(monitor);</pre>

  @monitor@ should be an object that responds to the @update()@ method. This
  method takes two arguments: an event name, and an event object. So, the object
  should look something like this:

  <pre>monitor = {
      update: function(event, data) {
          if (event === 'call') // ...
      }
  };</pre>

  There are three types of event, which tell you when a function is called, when
  a function returns, and when an error is thrown.

  h3. @call@ event

  The @call@ event fires when a function is called. The @data@ object in this
  case represents the data surrounding the method call. It has the following
  properties:

  * @object@ - The object receiving the method call
  * @method@ - The @Method@ object for the current method call
  * @env@ - The @Class@ or @Module@ where the method is being executed
  * @args@ - An @Array@ of the arguments to the method call
  * @leaf@ - Boolean indicating whether the call is a leaf; it's a leaf if no
    other method calls are logged while it is running. This is always @true@
    when a method is first called.

  h3. @return@ event

  The @return@ event fires when a function returns. The @data@ object is the
  same object that's passed to the @call@ event, with one extra property:

  * @result@ - The return value of the method call

  h3. @error@ event

  This event fires when an exception is thrown. The @data@ object is just the
  error that was raised.

  h3. Enabling tracing

  Since tracing incurs a performance cost, @jsclass@ does not trace anything by
  default. When you want to trace a module or class, you pass a list of the
  modules you want to trace to @Method.trace()@, and use @Method.untrace()@ to
  stop tracing them.

  <pre>Method.trace([Hash, Range]);</pre>

  h3. Call stack logging

  There is a logger you can use to print the call stack to the
  "@Console@":/console.html.  To use it, just pass a list of modules to trace
  and a function to @Method.tracing()@.  This enables tracing for the given
  modules, runs the function, then disables tracing again.

  <pre>Method.tracing([Hash], function() {
      var hash = new OrderedHash(['foo', 4, 'bar', 5]);
      hash.hasKey('foo');
  });</pre>

  !/images/tracing.png!
